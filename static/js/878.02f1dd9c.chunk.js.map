{"version":3,"file":"static/js/878.02f1dd9c.chunk.js","mappings":"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","sources":["pages/MovieDetails.jsx","services/api.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nimport { Suspense, useEffect, useRef, useState } from 'react';\nimport { Link, Outlet, useParams, useLocation } from 'react-router-dom';\nimport { getMovieById } from 'services/api';\nimport imgDefault from '../assets/default-movie.png'\nimport Loader from 'components/Loader/Loader';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n\n  const [movie, setMovie] = useState('');\n  const [error, setError] = useState(null);\n\n  const location = useLocation();\n  const movieLocationRef = useRef(location.state?.from ?? '/movies');\n\n  useEffect(() => {\n    if (!movieId) return;\n\n    const fetchMoviesById = async movieId => {\n      try {\n        const data = await getMovieById(movieId);\n        if (!data) {\n          setMovie('');\n          Notiflix.Notify.failure('Results not found');\n          return;\n        }\n        setMovie(data);\n        setError(null);\n      } catch (error) {\n        setError(error);\n      }\n    };\n\n    fetchMoviesById(movieId);\n  }, [movieId, error]);\n\n  const base_url = 'http://image.tmdb.org/t/p/';\n  const backdrop_size = 'w300/';\n\n  const { title, poster_path, genres, overview, homepage } = movie;\n  return (\n    <>\n      <h2>{title}</h2>\n      <Link to={movieLocationRef.current}>Back to movies</Link>\n      \n        <img src=\n        { poster_path ? \n          `${base_url}${backdrop_size}${poster_path}` : imgDefault} alt=\"\" />\n      \n      <h3>Genres:</h3>\n      {genres && genres.map(genre => <li key={genre.id}>{genre.name}</li>)}\n\n      <h3>Overview:</h3>\n      <p>{overview}</p>\n      <a href={homepage}>{homepage}</a>\n\n      <h3>Additional information:</h3>\n      <ul>\n        <li>\n          <Link to=\"cast\">Cast</Link>\n        </li>\n        <li>\n          <Link to=\"reviews\">Reviews</Link>\n        </li>\n      </ul>\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieDetails;\n","import Notiflix from 'notiflix';\n\nconst BASE_URL = \"https://api.themoviedb.org/3\";\nconst KEY = '7dc61a6c44fade8b575440491a92ae90';\n\nexport const getTrandingMovies = async () => {\n    const response = await fetch(`${BASE_URL}/trending/all/day?api_key=${KEY}`);\n    if (!response.ok) {\n        Notiflix.Notify.failure('Service not available');\n\n        return Promise.reject(new Error(\"Bad request\"));\n    }\n    return response.json();\n};\n\nexport const getMovieByName = async (searchQuery) => {\n    const response = await fetch(`${BASE_URL}/search/movie?query=${searchQuery}&api_key=${KEY}`);\n    if (!response.ok) {\n        Notiflix.Notify.failure('Service not available');\n        return Promise.reject(new Error(\"Bad request\"));\n    }\n    return response.json();\n\n};\n\nexport const getMovieById = async (movieId) => {\n    const response = await fetch(`${BASE_URL}/movie/${movieId}?api_key=${KEY}`);\n    if (!response.ok) {\n        Notiflix.Notify.failure('Service not available');\n        return Promise.reject(new Error(\"Bad request\"));\n    }\n    return response.json();\n};\n\nexport const getMovieCast = async (movieId) => {\n    const response = await fetch(`${BASE_URL}/movie/${movieId}/credits?api_key=${KEY}`);\n    if (!response.ok) {\n        Notiflix.Notify.failure('Service not available');\n        return Promise.reject(new Error(\"Bad request\"));\n    }\n    return response.json();\n}\n\nexport const getMovieReviews = async (movieId) => {\n    const response = await fetch(`${BASE_URL}/movie/${movieId}/reviews?api_key=${KEY}`);\n    if (!response.ok) {\n        Notiflix.Notify.failure('Service not available');\n        return Promise.reject(new Error(\"Bad request\"));\n    }\n    return response.json();\n}\n"],"names":["movieId","useParams","useState","movie","setMovie","error","setError","location","useLocation","movieLocationRef","useRef","state","from","useEffect","fetchMoviesById","getMovieById","data","Notiflix","title","poster_path","genres","overview","homepage","to","current","src","alt","map","genre","name","id","href","Suspense","fallback","Loader","BASE_URL","KEY","getTrandingMovies","fetch","response","ok","Promise","reject","Error","json","getMovieByName","searchQuery","getMovieCast","getMovieReviews"],"sourceRoot":""}