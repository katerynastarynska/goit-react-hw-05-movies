{"version":3,"file":"static/js/884.813a1678.chunk.js","mappings":"mPAuEA,UAjEqB,WAAO,IAAD,IACjBA,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAA0BE,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KAEMC,GAAWC,EAAAA,EAAAA,MACXC,GAAmBC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,YAExDC,EAAAA,EAAAA,YAAU,WACR,GAAKb,EAAL,CAEA,IAAMc,EAAe,mCAAG,WAAMd,GAAN,iGAEDe,EAAAA,EAAAA,IAAaf,GAFZ,UAEdgB,EAFc,8BAIlBZ,EAAS,IACTa,IAAAA,OAAAA,QAAwB,qBALN,0BAQpBb,EAASY,GACTV,EAAS,MATW,kDAWpBA,EAAS,EAAD,IAXY,0DAAH,sDAerBQ,EAAgBd,EAjBI,CAkBrB,GAAE,CAACA,EAASK,IAEb,IAGQa,EAAmDf,EAAnDe,MAAOC,EAA4ChB,EAA5CgB,YAAaC,EAA+BjB,EAA/BiB,OAAQC,EAAuBlB,EAAvBkB,SAAUC,EAAanB,EAAbmB,SAC9C,OACE,iCACE,wBAAKJ,KACL,SAAC,KAAD,CAAMK,GAAId,EAAiBe,QAA3B,4BACCL,IACC,gBAAKM,IAAG,UATG,8BASH,OARQ,SAQR,OAAgCN,GAAeO,IAAI,MAG7D,oCACCN,GAAUA,EAAOO,KAAI,SAAAC,GAAK,OAAI,wBAAoBA,EAAMC,MAAjBD,EAAME,GAAnB,KAE3B,uCACA,uBAAIT,KACJ,cAAGU,KAAMT,EAAT,SAAoBA,KAEpB,qDACA,2BACE,yBACE,SAAC,KAAD,CAAMC,GAAG,OAAT,qBAEF,yBACE,SAAC,KAAD,CAAMA,GAAG,UAAT,2BAGJ,SAAC,EAAAS,SAAD,CAAUC,UAAU,wCAApB,UACE,SAAC,KAAD,QAIP,C,gLCnEKC,EAAW,+BACXC,EAAM,mCASCC,EAAiB,mCAAG,oGACNC,MAAM,GAAD,OAAIH,EAAJ,qCAAyCC,IADxC,WACvBG,EADuB,QAEfC,GAFe,uBAGzBtB,IAAAA,OAAAA,QAAwB,yBAHC,kBAKlBuB,QAAQC,OAAO,IAAIC,MAAM,iBALP,gCAOtBJ,EAASK,QAPa,2CAAH,qDAUjBC,EAAc,mCAAG,WAAOC,GAAP,uFACHR,MAAM,GAAD,OAAIH,EAAJ,+BAAmCW,EAAnC,oBAA0DV,IAD5D,WACpBG,EADoB,QAEZC,GAFY,uBAGtBtB,IAAAA,OAAAA,QAAwB,yBAHF,kBAIfuB,QAAQC,OAAO,IAAIC,MAAM,iBAJV,gCAMnBJ,EAASK,QANU,2CAAH,sDAUd5B,EAAY,mCAAG,WAAOf,GAAP,uFACDqC,MAAM,GAAD,OAAIH,EAAJ,kBAAsBlC,EAAtB,oBAAyCmC,IAD7C,WAClBG,EADkB,QAEVC,GAFU,uBAGpBtB,IAAAA,OAAAA,QAAwB,yBAHJ,kBAIbuB,QAAQC,OAAO,IAAIC,MAAM,iBAJZ,gCAMjBJ,EAASK,QANQ,2CAAH,sDASZG,EAAY,mCAAG,WAAO9C,GAAP,uFACDqC,MAAM,GAAD,OAAIH,EAAJ,kBAAsBlC,EAAtB,4BAAiDmC,IADrD,WAClBG,EADkB,QAEVC,GAFU,uBAGpBtB,IAAAA,OAAAA,QAAwB,yBAHJ,kBAIbuB,QAAQC,OAAO,IAAIC,MAAM,iBAJZ,gCAMjBJ,EAASK,QANQ,2CAAH,qD","sources":["pages/MovieDetails.jsx","services/api.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nimport { Suspense, useEffect, useRef, useState } from 'react';\nimport { Link, Outlet, useParams, useLocation } from 'react-router-dom';\nimport { getMovieById } from 'services/api';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n\n  const [movie, setMovie] = useState('');\n  const [error, setError] = useState(null);\n\n  const location = useLocation();\n  const movieLocationRef = useRef(location.state?.from ?? '/movies');\n\n  useEffect(() => {\n    if (!movieId) return;\n\n    const fetchMoviesById = async movieId => {\n      try {\n        const data = await getMovieById(movieId);\n        if (!data) {\n          setMovie('');\n          Notiflix.Notify.failure('Results not found');\n          return;\n        }\n        setMovie(data);\n        setError(null);\n      } catch (error) {\n        setError(error);\n      }\n    };\n\n    fetchMoviesById(movieId);\n  }, [movieId, error]);\n\n  const base_url = 'http://image.tmdb.org/t/p/';\n  const backdrop_size = 'w300/';\n\n  const { title, poster_path, genres, overview, homepage } = movie;\n  return (\n    <>\n      <h2>{title}</h2>\n      <Link to={movieLocationRef.current}>Back to movies</Link>\n      {poster_path && (\n        <img src={`${base_url}${backdrop_size}${poster_path}`} alt=\"\" />\n      )}\n\n      <h3>Genres:</h3>\n      {genres && genres.map(genre => <li key={genre.id}>{genre.name}</li>)}\n\n      <h3>Overview:</h3>\n      <p>{overview}</p>\n      <a href={homepage}>{homepage}</a>\n\n      <h3>Additional information:</h3>\n      <ul>\n        <li>\n          <Link to=\"cast\">Cast</Link>\n        </li>\n        <li>\n          <Link to=\"reviews\">Reviews</Link>\n        </li>\n      </ul>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieDetails;\n","import Notiflix from 'notiflix';\n\nconst BASE_URL = \"https://api.themoviedb.org/3\";\nconst KEY = '7dc61a6c44fade8b575440491a92ae90';\n\n// https://api.themoviedb.org/3/trending/all/day?api_key=7dc61a6c44fade8b575440491a92ae90\n// https://api.themoviedb.org/3/movie/{movie_id}/reviews?api_key=7dc61a6c44fade8b575440491a92ae90\n// https://api.themoviedb.org/3/search/movie?api_key=7dc61a6c44fade8b575440491a92ae90\n\n// details: https://api.themoviedb.org/3/movie/{movie_id}?api_key=7dc61a6c44fade8b575440491a92ae90\n// https://api.themoviedb.org/3/movie/{movie_id}/credits?api_key=7dc61a6c44fade8b575440491a92ae90\n\nexport const getTrandingMovies = async () => {\n    const response = await fetch(`${BASE_URL}/trending/all/day?api_key=${KEY}`);\n    if (!response.ok) {\n        Notiflix.Notify.failure('Service not available');\n\n        return Promise.reject(new Error(\"Bad request\"));\n    }\n    return response.json();\n};\n\nexport const getMovieByName = async (searchQuery) => {\n    const response = await fetch(`${BASE_URL}/search/movie?query=${searchQuery}&api_key=${KEY}`);\n    if (!response.ok) {\n        Notiflix.Notify.failure('Service not available');\n        return Promise.reject(new Error(\"Bad request\"));\n    }\n    return response.json();\n\n};\n\nexport const getMovieById = async (movieId) => {\n    const response = await fetch(`${BASE_URL}/movie/${movieId}?api_key=${KEY}`);\n    if (!response.ok) {\n        Notiflix.Notify.failure('Service not available');\n        return Promise.reject(new Error(\"Bad request\"));\n    }\n    return response.json();\n};\n\nexport const getCastMovie = async (movieId) => {\n    const response = await fetch(`${BASE_URL}/movie/${movieId}/credits?api_key=${KEY}`);\n    if (!response.ok) {\n        Notiflix.Notify.failure('Service not available');\n        return Promise.reject(new Error(\"Bad request\"));\n    }\n    return response.json();\n}\n\n\n// https://api.themoviedb.org/3/movie/976573/credits?api_key=7dc61a6c44fade8b575440491a92ae90&profile_path=/liV9OXUeo7T19hhjFlqTELtETnW.jpg\n// http://image.tmdb.org/t/p/w300/liV9OXUeo7T19hhjFlqTELtETnW.jpg"],"names":["movieId","useParams","useState","movie","setMovie","error","setError","location","useLocation","movieLocationRef","useRef","state","from","useEffect","fetchMoviesById","getMovieById","data","Notiflix","title","poster_path","genres","overview","homepage","to","current","src","alt","map","genre","name","id","href","Suspense","fallback","BASE_URL","KEY","getTrandingMovies","fetch","response","ok","Promise","reject","Error","json","getMovieByName","searchQuery","getCastMovie"],"sourceRoot":""}