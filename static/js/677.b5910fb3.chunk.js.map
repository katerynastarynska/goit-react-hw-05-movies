{"version":3,"file":"static/js/677.b5910fb3.chunk.js","mappings":"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","sources":["components/Form.jsx","pages/Movies.jsx","services/api.js"],"sourcesContent":["import { useState } from 'react';\nimport Notiflix from 'notiflix';\n\nconst Form = ({ setSearchParams }) => {\n  const [movieName, setMovieName] = useState('');\n\n  const handleMovieSearch = e => {\n    const value = e.target.value;\n    setMovieName(value);\n\n    if (value === '') {\n      return setSearchParams({});\n    }\n    setSearchParams({ searchQuery: value.toLowerCase() });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (movieName.trim() === '') {\n      Notiflix.Notify.failure('Please enter movie name');\n      return;\n    }\n    setSearchParams({ movieName });\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        autoComplete=\"off\"\n        autoFocus\n        value={movieName}\n        placeholder=\"Search movies\"\n        onChange={handleMovieSearch}\n      />\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n};\n\nexport default Form;\n","import Notiflix from 'notiflix';\nimport { useState, useEffect } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\n\nimport Form from 'components/Form';\nimport { getMovieByName } from 'services/api';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams({});\n  const searchQuery = searchParams.get('movieName') ?? '';\n  const location = useLocation();\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (!searchQuery) {\n      return;\n    }\n\n    const fetchMoviesByName = async searchQuery => {\n      try {\n        const data = await getMovieByName(searchQuery);\n        if (!data?.results?.length) {\n          setMovies([]);\n          Notiflix.Notify.failure('Results not found');\n          return;\n        }\n        setMovies(data.results);\n        setError(null);\n      } catch (error) {\n        setError(error);\n      }\n    };\n\n    fetchMoviesByName(searchQuery);\n  }, [searchParams, error, searchQuery]);\n\n  return (\n    <>\n      <header>\n        <Form setSearchParams={setSearchParams} />\n      </header>\n\n      <div>\n        <ul>\n          {movies.map(({id, title, name}) => {\n            return (\n              <Link\n                key={id}\n                to={`${id}`}\n                state={{ from: location }}\n              >\n                <p>{title || name}</p>{' '}\n              </Link>\n            );\n          })}\n        </ul>\n      </div>\n    </>\n  );\n};\n\nexport default Movies;\n","import Notiflix from 'notiflix';\n\nconst BASE_URL = \"https://api.themoviedb.org/3\";\nconst KEY = '7dc61a6c44fade8b575440491a92ae90';\n\nexport const getTrandingMovies = async () => {\n    const response = await fetch(`${BASE_URL}/trending/all/day?api_key=${KEY}`);\n    if (!response.ok) {\n        Notiflix.Notify.failure('Service not available');\n\n        return Promise.reject(new Error(\"Bad request\"));\n    }\n    return response.json();\n};\n\nexport const getMovieByName = async (searchQuery) => {\n    const response = await fetch(`${BASE_URL}/search/movie?query=${searchQuery}&api_key=${KEY}`);\n    if (!response.ok) {\n        Notiflix.Notify.failure('Service not available');\n        return Promise.reject(new Error(\"Bad request\"));\n    }\n    return response.json();\n\n};\n\nexport const getMovieById = async (movieId) => {\n    const response = await fetch(`${BASE_URL}/movie/${movieId}?api_key=${KEY}`);\n    if (!response.ok) {\n        Notiflix.Notify.failure('Service not available');\n        return Promise.reject(new Error(\"Bad request\"));\n    }\n    return response.json();\n};\n\nexport const getMovieCast = async (movieId) => {\n    const response = await fetch(`${BASE_URL}/movie/${movieId}/credits?api_key=${KEY}`);\n    if (!response.ok) {\n        Notiflix.Notify.failure('Service not available');\n        return Promise.reject(new Error(\"Bad request\"));\n    }\n    return response.json();\n}\n\nexport const getMovieReviews = async (movieId) => {\n    const response = await fetch(`${BASE_URL}/movie/${movieId}/reviews?api_key=${KEY}`);\n    if (!response.ok) {\n        Notiflix.Notify.failure('Service not available');\n        return Promise.reject(new Error(\"Bad request\"));\n    }\n    return response.json();\n}\n"],"names":["setSearchParams","useState","movieName","setMovieName","onSubmit","e","preventDefault","trim","Notiflix","type","autoComplete","autoFocus","value","placeholder","onChange","target","searchQuery","toLowerCase","useSearchParams","searchParams","get","location","useLocation","movies","setMovies","error","setError","useEffect","fetchMoviesByName","getMovieByName","data","results","length","map","id","title","name","to","state","from","BASE_URL","KEY","getTrandingMovies","fetch","response","ok","Promise","reject","Error","json","getMovieById","movieId","getMovieCast","getMovieReviews"],"sourceRoot":""}