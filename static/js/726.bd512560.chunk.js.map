{"version":3,"file":"static/js/726.bd512560.chunk.js","mappings":"+PA0DA,EApDa,WACX,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAAkCE,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,MAEAC,EAAAA,EAAAA,YAAU,WACR,GAAKP,EAAL,CAEA,IAAMQ,EAAc,mCAAG,WAAMR,GAAN,iGAEAS,EAAAA,EAAAA,IAAaT,GAFb,OAEbU,EAFa,OAGnBN,EAAaM,EAAKC,MAClBL,EAAS,MAJU,gDAMnBA,EAAS,EAAD,IANW,yDAAH,sDASpBE,EAAeR,EAXK,CAYrB,GAAE,CAACA,EAASK,IAOb,OAFAO,QAAQC,IAAIV,IAGV,0BACE,wBACwB,IAArBA,EAAUW,OACTX,EAAUY,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,UAA3B,OACZ,2BACE,gBACEC,IACEH,EAAY,UAbX,8BAaW,OAZT,QAYS,OACmBA,G,6dAGjCI,IAAI,MAEN,wBAAKH,KACL,yBAAG,cAAYC,OAVRH,EADG,KAed,wBAAI,sBAKb,C,wMCtDKM,EAAW,+BACXC,EAAM,mCAECC,EAAiB,mCAAG,oGACNC,MAAM,GAAD,OAAIH,EAAJ,qCAAyCC,IADxC,WACvBG,EADuB,QAEfC,GAFe,uBAGzBC,IAAAA,OAAAA,QAAwB,yBAHC,kBAKlBC,QAAQC,OAAO,IAAIC,MAAM,iBALP,gCAOtBL,EAASM,QAPa,2CAAH,qDAUjBC,EAAc,mCAAG,WAAOC,GAAP,uFACHT,MAAM,GAAD,OAAIH,EAAJ,+BAAmCY,EAAnC,oBAA0DX,IAD5D,WACpBG,EADoB,QAEZC,GAFY,uBAGtBC,IAAAA,OAAAA,QAAwB,yBAHF,kBAIfC,QAAQC,OAAO,IAAIC,MAAM,iBAJV,gCAMnBL,EAASM,QANU,2CAAH,sDAUdG,EAAY,mCAAG,WAAOnC,GAAP,uFACDyB,MAAM,GAAD,OAAIH,EAAJ,kBAAsBtB,EAAtB,oBAAyCuB,IAD7C,WAClBG,EADkB,QAEVC,GAFU,uBAGpBC,IAAAA,OAAAA,QAAwB,yBAHJ,kBAIbC,QAAQC,OAAO,IAAIC,MAAM,iBAJZ,gCAMjBL,EAASM,QANQ,2CAAH,sDASZvB,EAAY,mCAAG,WAAOT,GAAP,uFACDyB,MAAM,GAAD,OAAIH,EAAJ,kBAAsBtB,EAAtB,4BAAiDuB,IADrD,WAClBG,EADkB,QAEVC,GAFU,uBAGpBC,IAAAA,OAAAA,QAAwB,yBAHJ,kBAIbC,QAAQC,OAAO,IAAIC,MAAM,iBAJZ,gCAMjBL,EAASM,QANQ,2CAAH,sDASZI,EAAe,mCAAG,WAAOpC,GAAP,uFACJyB,MAAM,GAAD,OAAIH,EAAJ,kBAAsBtB,EAAtB,4BAAiDuB,IADlD,WACrBG,EADqB,QAEbC,GAFa,uBAGvBC,IAAAA,OAAAA,QAAwB,yBAHD,kBAIhBC,QAAQC,OAAO,IAAIC,MAAM,iBAJT,gCAMpBL,EAASM,QANW,2CAAH,qD","sources":["components/Cast.jsx","services/api.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { getMovieCast } from 'services/api';\nimport imgDefault from '../assets/default-image.png';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n\n  const [movieCast, setMovieCast] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (!movieId) return;\n\n    const fetchMovieCast = async movieId => {\n      try {\n        const data = await getMovieCast(movieId);\n        setMovieCast(data.cast);\n        setError(null);\n      } catch (error) {\n        setError(error);\n      }\n    };\n    fetchMovieCast(movieId);\n  }, [movieId, error]);\n\n  const base_url = 'http://image.tmdb.org/t/p/';\n  const image_size = 'w92/';\n\n  console.log(movieCast);\n\n  return (\n    <div>\n      <ul>\n        {movieCast.length !== 0 ? (\n          movieCast.map(({ id, profile_path, name, character }) => (\n            <li key={id}>\n              <img\n                src={\n                  profile_path\n                    ? `${base_url}${image_size}${profile_path}`\n                    : imgDefault\n                }\n                alt=\"\"\n              />\n              <h5>{name}</h5>\n              <p>Character: {character}</p>\n            </li>\n          ))\n        ) : (\n          <li>No information</li>\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default Cast;\n","import Notiflix from 'notiflix';\n\nconst BASE_URL = \"https://api.themoviedb.org/3\";\nconst KEY = '7dc61a6c44fade8b575440491a92ae90';\n\nexport const getTrandingMovies = async () => {\n    const response = await fetch(`${BASE_URL}/trending/all/day?api_key=${KEY}`);\n    if (!response.ok) {\n        Notiflix.Notify.failure('Service not available');\n\n        return Promise.reject(new Error(\"Bad request\"));\n    }\n    return response.json();\n};\n\nexport const getMovieByName = async (searchQuery) => {\n    const response = await fetch(`${BASE_URL}/search/movie?query=${searchQuery}&api_key=${KEY}`);\n    if (!response.ok) {\n        Notiflix.Notify.failure('Service not available');\n        return Promise.reject(new Error(\"Bad request\"));\n    }\n    return response.json();\n\n};\n\nexport const getMovieById = async (movieId) => {\n    const response = await fetch(`${BASE_URL}/movie/${movieId}?api_key=${KEY}`);\n    if (!response.ok) {\n        Notiflix.Notify.failure('Service not available');\n        return Promise.reject(new Error(\"Bad request\"));\n    }\n    return response.json();\n};\n\nexport const getMovieCast = async (movieId) => {\n    const response = await fetch(`${BASE_URL}/movie/${movieId}/credits?api_key=${KEY}`);\n    if (!response.ok) {\n        Notiflix.Notify.failure('Service not available');\n        return Promise.reject(new Error(\"Bad request\"));\n    }\n    return response.json();\n}\n\nexport const getMovieReviews = async (movieId) => {\n    const response = await fetch(`${BASE_URL}/movie/${movieId}/reviews?api_key=${KEY}`);\n    if (!response.ok) {\n        Notiflix.Notify.failure('Service not available');\n        return Promise.reject(new Error(\"Bad request\"));\n    }\n    return response.json();\n}\n"],"names":["movieId","useParams","useState","movieCast","setMovieCast","error","setError","useEffect","fetchMovieCast","getMovieCast","data","cast","console","log","length","map","id","profile_path","name","character","src","alt","BASE_URL","KEY","getTrandingMovies","fetch","response","ok","Notiflix","Promise","reject","Error","json","getMovieByName","searchQuery","getMovieById","getMovieReviews"],"sourceRoot":""}