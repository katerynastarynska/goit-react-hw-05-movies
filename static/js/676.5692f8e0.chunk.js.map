{"version":3,"file":"static/js/676.5692f8e0.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/pages/MovieDetails/MovieDetails.module.css?0c24","pages/MovieDetails/MovieDetails.jsx","services/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"movieTitle\":\"MovieDetails_movieTitle__0CAOT\",\"movieInfo\":\"MovieDetails_movieInfo__4EKMk\",\"movieDetails\":\"MovieDetails_movieDetails__EbgQo\",\"movieGenres\":\"MovieDetails_movieGenres__frmdo\",\"genresTitle\":\"MovieDetails_genresTitle__6SHlq\",\"genreList\":\"MovieDetails_genreList__m+hfk\",\"genreListItem\":\"MovieDetails_genreListItem__ye8Pl\",\"movieOverview\":\"MovieDetails_movieOverview__acHno\",\"movieOverviewInfo\":\"MovieDetails_movieOverviewInfo__kSKWJ\",\"homepageLink\":\"MovieDetails_homepageLink__XhWcN\",\"backToMoviesBtn\":\"MovieDetails_backToMoviesBtn__DHhbQ\",\"additionalInfoList\":\"MovieDetails_additionalInfoList__LrD0C\",\"additionalInfoText\":\"MovieDetails_additionalInfoText__CjzLe\"};","import Notiflix from 'notiflix';\n\nimport { Suspense, useEffect, useRef, useState } from 'react';\nimport { Link, Outlet, useParams, useLocation } from 'react-router-dom';\n\nimport { getMovieById } from 'services/api';\nimport Loader from 'components/Loader/Loader';\nimport imgDefault from '../../assets/default-movie.png';\nimport css from './MovieDetails.module.css';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n\n  const [movie, setMovie] = useState('');\n  const [error, setError] = useState(null);\n\n  const location = useLocation();\n  const movieLocationRef = useRef(location.state?.from ?? '/');\n\n  useEffect(() => {\n    if (!movieId) return;\n\n    const fetchMoviesById = async movieId => {\n      try {\n        const data = await getMovieById(movieId);\n        if (!data) {\n          setMovie('');\n          Notiflix.Notify.failure('Results not found');\n          return;\n        }\n        setMovie(data);\n        setError(null);\n      } catch (error) {\n        setError(error);\n      }\n    };\n\n    fetchMoviesById(movieId);\n  }, [movieId, error]);\n\n  const base_url = 'http://image.tmdb.org/t/p/';\n  const backdrop_size = 'w342/';\n\n  const { title, poster_path, genres, overview, homepage } = movie;\n  return (\n    <>\n      <h2 className={css.movieTitle}>{title}</h2>\n      <div className={css.movieInfo}>\n        <img\n          src={\n            poster_path\n              ? `${base_url}${backdrop_size}${poster_path}`\n              : imgDefault\n          }\n          alt={title}\n        />\n\n        <div className={css.movieDetails}>\n          <div className={css.movieGenres}>\n            <h3 className={css.genresTitle}>Genres:</h3>\n            <ul className={css.genreList}>\n              {genres &&\n                genres.map(genre => (\n                  <li className={css.genreListItem} key={genre.id}>\n                    {genre.name}\n                  </li>\n                ))}\n            </ul>\n          </div>\n          <div className={css.movieOverview}>\n            <h3 className={css.genresTitle}>Overview:</h3>\n            <p className={css.movieOverviewInfo}>{overview}</p>\n            <a href={homepage} className={css.homepageLink}>\n              {homepage}\n            </a>\n          </div>\n        </div>\n      </div>\n\n      <br />\n\n      <Link to={movieLocationRef.current} className={css.backToMoviesBtn}>\n        Back to movies\n      </Link>\n      <ul className={css.additionalInfoList}>\n        <li>\n          <Link className={css.additionalInfoText} to=\"cast\">\n            Cast\n          </Link>\n        </li>\n        <li>\n          <Link className={css.additionalInfoText} to=\"reviews\">\n            Reviews\n          </Link>\n        </li>\n      </ul>\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieDetails;\n","import Notiflix from 'notiflix';\n\nconst BASE_URL = \"https://api.themoviedb.org/3\";\nconst KEY = '7dc61a6c44fade8b575440491a92ae90';\n\nexport const getTrandingMovies = async () => {\n    const response = await fetch(`${BASE_URL}/trending/all/day?api_key=${KEY}`);\n    if (!response.ok) {\n        Notiflix.Notify.failure('Service not available');\n\n        return Promise.reject(new Error(\"Bad request\"));\n    }\n    return response.json();\n};\n\nexport const getMovieByName = async (searchQuery) => {\n    const response = await fetch(`${BASE_URL}/search/movie?query=${searchQuery}&api_key=${KEY}`);\n    if (!response.ok) {\n        Notiflix.Notify.failure('Service not available');\n        return Promise.reject(new Error(\"Bad request\"));\n    }\n    return response.json();\n\n};\n\nexport const getMovieById = async (movieId) => {\n    const response = await fetch(`${BASE_URL}/movie/${movieId}?api_key=${KEY}`);\n    if (!response.ok) {\n        Notiflix.Notify.failure('Service not available');\n        return Promise.reject(new Error(\"Bad request\"));\n    }\n    return response.json();\n};\n\nexport const getMovieCast = async (movieId) => {\n    const response = await fetch(`${BASE_URL}/movie/${movieId}/credits?api_key=${KEY}`);\n    if (!response.ok) {\n        Notiflix.Notify.failure('Service not available');\n        return Promise.reject(new Error(\"Bad request\"));\n    }\n    return response.json();\n}\n\nexport const getMovieReviews = async (movieId) => {\n    const response = await fetch(`${BASE_URL}/movie/${movieId}/reviews?api_key=${KEY}`);\n    if (!response.ok) {\n        Notiflix.Notify.failure('Service not available');\n        return Promise.reject(new Error(\"Bad request\"));\n    }\n    return response.json();\n}\n"],"names":["movieId","useParams","useState","movie","setMovie","error","setError","location","useLocation","movieLocationRef","useRef","state","from","useEffect","fetchMoviesById","getMovieById","data","Notiflix","title","poster_path","genres","overview","homepage","className","css","src","alt","map","genre","name","id","href","to","current","Suspense","fallback","Loader","BASE_URL","KEY","getTrandingMovies","fetch","response","ok","Promise","reject","Error","json","getMovieByName","searchQuery","getMovieCast","getMovieReviews"],"sourceRoot":""}