{"version":3,"file":"static/js/918.dfca3d83.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/components/Form/Form.module.css?89ba","components/Form/Form.jsx","webpack://goit-react-hw-05-movies/./src/pages/Movies/Movies.module.css?82ee","pages/Movies/Movies.jsx","services/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"searchbar\":\"Form_searchbar__4gZc3\",\"searchForm\":\"Form_searchForm__eyCyq\",\"inputSearch\":\"Form_inputSearch__NCzcR\",\"searchBtn\":\"Form_searchBtn__oX7XP\"};","import { useState } from 'react';\nimport Notiflix from 'notiflix';\n\nimport css from './Form.module.css';\n\nconst Form = ({ setSearchParams }) => {\n  const [movieName, setMovieName] = useState('');\n\n  const handleMovieSearch = e => {\n    const value = e.target.value;\n    setMovieName(value);\n\n    if (value === '') {\n      return setSearchParams({});\n    }\n    setSearchParams({ searchQuery: value.toLowerCase() });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (movieName.trim() === '') {\n      Notiflix.Notify.failure('Please enter movie name');\n      return;\n    }\n    setSearchParams({ movieName });\n  };\n\n  return (\n    <div className={css.searchbar}>\n      <form className={css.searchForm} onSubmit={handleSubmit}>\n        <input\n          className={css.inputSearch}\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          value={movieName}\n          placeholder=\"Movie name\"\n          onChange={handleMovieSearch}\n        />\n        <button className={css.searchBtn} type=\"submit\">\n          Search\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default Form;\n","// extracted by mini-css-extract-plugin\nexport default {\"searchedMoviesList\":\"Movies_searchedMoviesList__ZXXYs\",\"searchedMoviesItem\":\"Movies_searchedMoviesItem__ICcOB\",\"searchedMoviesName\":\"Movies_searchedMoviesName__tSbIF\",\"searchedMoviesNameContainer\":\"Movies_searchedMoviesNameContainer__0nKaE\"};","import Notiflix from 'notiflix';\nimport { useState, useEffect } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\n\nimport Form from 'components/Form/Form';\nimport { getMovieByName } from 'services/api';\nimport css from './Movies.module.css';\nimport imgDefault from '../../assets/default-image154w.png';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams({});\n  const searchQuery = searchParams.get('movieName') ?? '';\n  const location = useLocation();\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (!searchQuery) {\n      return;\n    }\n\n    const fetchMoviesByName = async searchQuery => {\n      try {\n        const data = await getMovieByName(searchQuery);\n        if (!data?.results?.length) {\n          setMovies([]);\n          Notiflix.Notify.failure('Results not found');\n          return;\n        }\n        setMovies(data.results);\n        setError(null);\n      } catch (error) {\n        setError(error);\n      }\n    };\n\n    fetchMoviesByName(searchQuery);\n  }, [searchParams, error, searchQuery]);\n\n  const base_url = 'http://image.tmdb.org/t/p/';\n  const image_size = 'w154/';\n\n  return (\n    <>\n      <Form setSearchParams={setSearchParams} />\n      <div>\n        <ul className={css.searchedMoviesList}>\n          {movies.map(({ id, title, name, poster_path }) => {\n            return (\n              <Link\n                className={css.searchedMoviesItem}\n                key={id}\n                to={`${id}`}\n                state={{ from: location }}\n              >\n                <img\n                  src={\n                    poster_path\n                      ? `${base_url}${image_size}${poster_path}`\n                      : imgDefault\n                  }\n                  alt={title}\n                />\n                <div className={css.searchedMoviesNameContainer}>\n                  <p className={css.searchedMoviesName}>{title || name}</p>\n                </div>\n              </Link>\n            );\n          })}\n        </ul>\n      </div>\n    </>\n  );\n};\n\nexport default Movies;\n","import Notiflix from 'notiflix';\n\nconst BASE_URL = \"https://api.themoviedb.org/3\";\nconst KEY = '7dc61a6c44fade8b575440491a92ae90';\n\nexport const getTrandingMovies = async () => {\n    const response = await fetch(`${BASE_URL}/trending/all/day?api_key=${KEY}`);\n    if (!response.ok) {\n        Notiflix.Notify.failure('Service not available');\n\n        return Promise.reject(new Error(\"Bad request\"));\n    }\n    return response.json();\n};\n\nexport const getMovieByName = async (searchQuery) => {\n    const response = await fetch(`${BASE_URL}/search/movie?query=${searchQuery}&api_key=${KEY}`);\n    if (!response.ok) {\n        Notiflix.Notify.failure('Service not available');\n        return Promise.reject(new Error(\"Bad request\"));\n    }\n    return response.json();\n\n};\n\nexport const getMovieById = async (movieId) => {\n    const response = await fetch(`${BASE_URL}/movie/${movieId}?api_key=${KEY}`);\n    if (!response.ok) {\n        Notiflix.Notify.failure('Service not available');\n        return Promise.reject(new Error(\"Bad request\"));\n    }\n    return response.json();\n};\n\nexport const getMovieCast = async (movieId) => {\n    const response = await fetch(`${BASE_URL}/movie/${movieId}/credits?api_key=${KEY}`);\n    if (!response.ok) {\n        Notiflix.Notify.failure('Service not available');\n        return Promise.reject(new Error(\"Bad request\"));\n    }\n    return response.json();\n}\n\nexport const getMovieReviews = async (movieId) => {\n    const response = await fetch(`${BASE_URL}/movie/${movieId}/reviews?api_key=${KEY}`);\n    if (!response.ok) {\n        Notiflix.Notify.failure('Service not available');\n        return Promise.reject(new Error(\"Bad request\"));\n    }\n    return response.json();\n}\n"],"names":["setSearchParams","useState","movieName","setMovieName","className","css","onSubmit","e","preventDefault","trim","Notiflix","type","autoComplete","autoFocus","value","placeholder","onChange","target","searchQuery","toLowerCase","useSearchParams","searchParams","get","location","useLocation","movies","setMovies","error","setError","useEffect","fetchMoviesByName","getMovieByName","data","results","length","map","id","title","name","poster_path","to","state","from","src","imgDefault","alt","BASE_URL","KEY","getTrandingMovies","fetch","response","ok","Promise","reject","Error","json","getMovieById","movieId","getMovieCast","getMovieReviews"],"sourceRoot":""}