{"version":3,"file":"static/js/59.bcec773e.chunk.js","mappings":"oPACA,GAAgB,SAAW,uBAAuB,aAAe,2BAA2B,kBAAoB,gCAAgC,kBAAoB,gCAAgC,uBAAyB,qCAAqC,sBAAwB,oCAAoC,eAAiB,8B,SC8D/U,EAxDa,WACX,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAAkCE,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,MAEAC,EAAAA,EAAAA,YAAU,WACR,GAAKP,EAAL,CAEA,IAAMQ,EAAc,mCAAG,WAAMR,GAAN,iGAEAS,EAAAA,EAAAA,IAAaT,GAFb,OAEbU,EAFa,OAGnBN,EAAaM,EAAKC,MAClBL,EAAS,MAJU,gDAMnBA,EAAS,EAAD,IANW,yDAAH,sDASpBE,EAAeR,EAXK,CAYrB,GAAE,CAACA,EAASK,IAKb,OACE,0BACE,eAAIO,UAAWC,EAAAA,SAAf,SACwB,IAArBV,EAAUW,OACTX,EAAUY,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,UAA3B,OACZ,gBAAIP,UAAWC,EAAAA,aAAf,WACE,gBACED,UAAWC,EAAAA,UACXO,IACEH,EAAY,UAZX,8BAYW,OAXT,QAWS,OACmBA,G,6dAGjCI,IAAKH,KAEP,eAAIN,UAAWC,EAAAA,kBAAf,SAAuCK,KACvC,gBAAKN,UAAWC,EAAAA,kBAAhB,UACE,gBAAID,UAAWC,EAAAA,uBAAf,UAA2C,cAEzC,cAAGD,UAAWC,EAAAA,sBAAd,SAA0CM,WAdVH,EAD1B,KAqBd,eAAIJ,UAAWC,EAAAA,eAAf,SAAmC,sBAK5C,C,wMC3DKS,EAAW,+BACXC,EAAM,mCAECC,EAAiB,mCAAG,oGACNC,MAAM,GAAD,OAAIH,EAAJ,qCAAyCC,IADxC,WACvBG,EADuB,QAEfC,GAFe,uBAGzBC,IAAAA,OAAAA,QAAwB,yBAHC,kBAKlBC,QAAQC,OAAO,IAAIC,MAAM,iBALP,gCAOtBL,EAASM,QAPa,2CAAH,qDAUjBC,EAAc,mCAAG,WAAOC,GAAP,uFACHT,MAAM,GAAD,OAAIH,EAAJ,+BAAmCY,EAAnC,oBAA0DX,IAD5D,WACpBG,EADoB,QAEZC,GAFY,uBAGtBC,IAAAA,OAAAA,QAAwB,yBAHF,kBAIfC,QAAQC,OAAO,IAAIC,MAAM,iBAJV,gCAMnBL,EAASM,QANU,2CAAH,sDAUdG,EAAY,mCAAG,WAAOnC,GAAP,uFACDyB,MAAM,GAAD,OAAIH,EAAJ,kBAAsBtB,EAAtB,oBAAyCuB,IAD7C,WAClBG,EADkB,QAEVC,GAFU,uBAGpBC,IAAAA,OAAAA,QAAwB,yBAHJ,kBAIbC,QAAQC,OAAO,IAAIC,MAAM,iBAJZ,gCAMjBL,EAASM,QANQ,2CAAH,sDASZvB,EAAY,mCAAG,WAAOT,GAAP,uFACDyB,MAAM,GAAD,OAAIH,EAAJ,kBAAsBtB,EAAtB,4BAAiDuB,IADrD,WAClBG,EADkB,QAEVC,GAFU,uBAGpBC,IAAAA,OAAAA,QAAwB,yBAHJ,kBAIbC,QAAQC,OAAO,IAAIC,MAAM,iBAJZ,gCAMjBL,EAASM,QANQ,2CAAH,sDASZI,EAAe,mCAAG,WAAOpC,GAAP,uFACJyB,MAAM,GAAD,OAAIH,EAAJ,kBAAsBtB,EAAtB,4BAAiDuB,IADlD,WACrBG,EADqB,QAEbC,GAFa,uBAGvBC,IAAAA,OAAAA,QAAwB,yBAHD,kBAIhBC,QAAQC,OAAO,IAAIC,MAAM,iBAJT,gCAMpBL,EAASM,QANW,2CAAH,qD","sources":["webpack://goit-react-hw-05-movies/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx","services/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"castList\":\"Cast_castList__ARoWn\",\"castListItem\":\"Cast_castListItem__CF66s\",\"castListActorName\":\"Cast_castListActorName__McyhJ\",\"castListCharacter\":\"Cast_castListCharacter__ES7-f\",\"castListCharacterTitle\":\"Cast_castListCharacterTitle__49yG2\",\"castListCharacterName\":\"Cast_castListCharacterName__s8h-l\",\"castListNoInfo\":\"Cast_castListNoInfo__r1idc\"};","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { getMovieCast } from 'services/api';\nimport imgDefault from '../../assets/default-image.png';\nimport css from './Cast.module.css';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n\n  const [movieCast, setMovieCast] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (!movieId) return;\n\n    const fetchMovieCast = async movieId => {\n      try {\n        const data = await getMovieCast(movieId);\n        setMovieCast(data.cast);\n        setError(null);\n      } catch (error) {\n        setError(error);\n      }\n    };\n    fetchMovieCast(movieId);\n  }, [movieId, error]);\n\n  const base_url = 'http://image.tmdb.org/t/p/';\n  const image_size = 'w92/';\n\n  return (\n    <div>\n      <ul className={css.castList}>\n        {movieCast.length !== 0 ? (\n          movieCast.map(({ id, profile_path, name, character }) => (\n            <li className={css.castListItem} key={id}>\n              <img\n                className={css.castImage}\n                src={\n                  profile_path\n                    ? `${base_url}${image_size}${profile_path}`\n                    : imgDefault\n                }\n                alt={name}\n              />\n              <h5 className={css.castListActorName}>{name}</h5>\n              <div className={css.castListCharacter}>\n                <h6 className={css.castListCharacterTitle}>\n                  Character:\n                  <p className={css.castListCharacterName}>{character}</p>\n                </h6>\n              </div>\n            </li>\n          ))\n        ) : (\n          <li className={css.castListNoInfo}>No information</li>\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default Cast;\n","import Notiflix from 'notiflix';\n\nconst BASE_URL = \"https://api.themoviedb.org/3\";\nconst KEY = '7dc61a6c44fade8b575440491a92ae90';\n\nexport const getTrandingMovies = async () => {\n    const response = await fetch(`${BASE_URL}/trending/all/day?api_key=${KEY}`);\n    if (!response.ok) {\n        Notiflix.Notify.failure('Service not available');\n\n        return Promise.reject(new Error(\"Bad request\"));\n    }\n    return response.json();\n};\n\nexport const getMovieByName = async (searchQuery) => {\n    const response = await fetch(`${BASE_URL}/search/movie?query=${searchQuery}&api_key=${KEY}`);\n    if (!response.ok) {\n        Notiflix.Notify.failure('Service not available');\n        return Promise.reject(new Error(\"Bad request\"));\n    }\n    return response.json();\n\n};\n\nexport const getMovieById = async (movieId) => {\n    const response = await fetch(`${BASE_URL}/movie/${movieId}?api_key=${KEY}`);\n    if (!response.ok) {\n        Notiflix.Notify.failure('Service not available');\n        return Promise.reject(new Error(\"Bad request\"));\n    }\n    return response.json();\n};\n\nexport const getMovieCast = async (movieId) => {\n    const response = await fetch(`${BASE_URL}/movie/${movieId}/credits?api_key=${KEY}`);\n    if (!response.ok) {\n        Notiflix.Notify.failure('Service not available');\n        return Promise.reject(new Error(\"Bad request\"));\n    }\n    return response.json();\n}\n\nexport const getMovieReviews = async (movieId) => {\n    const response = await fetch(`${BASE_URL}/movie/${movieId}/reviews?api_key=${KEY}`);\n    if (!response.ok) {\n        Notiflix.Notify.failure('Service not available');\n        return Promise.reject(new Error(\"Bad request\"));\n    }\n    return response.json();\n}\n"],"names":["movieId","useParams","useState","movieCast","setMovieCast","error","setError","useEffect","fetchMovieCast","getMovieCast","data","cast","className","css","length","map","id","profile_path","name","character","src","alt","BASE_URL","KEY","getTrandingMovies","fetch","response","ok","Notiflix","Promise","reject","Error","json","getMovieByName","searchQuery","getMovieById","getMovieReviews"],"sourceRoot":""}