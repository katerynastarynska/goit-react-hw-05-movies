{"version":3,"file":"static/js/677.7c8f5f5d.chunk.js","mappings":"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","sources":["components/Form.jsx","pages/Movies.jsx","services/api.js"],"sourcesContent":["import { useState } from 'react';\nimport Notiflix from 'notiflix';\n\nconst Form = ({ setSearchParams }) => {\n  const [movieName, setMovieName] = useState('');\n\n  const handleMovieSearch = e => {\n    const value = e.target.value;\n    setMovieName(value);\n\n    if (value === '') {\n      return setSearchParams({});\n    }\n    setSearchParams({ searchQuery: value.toLowerCase() });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (movieName.trim() === '') {\n      Notiflix.Notify.failure('Please enter movie name');\n      return;\n    }\n    setSearchParams({ movieName });\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        autoComplete=\"off\"\n        autoFocus\n        value={movieName}\n        placeholder=\"Search movies\"\n        onChange={handleMovieSearch}\n      />\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n};\n\nexport default Form;\n","import Notiflix from 'notiflix';\nimport { useState, useEffect } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\n\nimport Form from 'components/Form';\nimport { getMovieByName } from 'services/api';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams({});\n  const searchQuery = searchParams.get('movieName') ?? '';\nconst location = useLocation()\nconsole.log(location) \n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    // const searchQuery = searchParams.get('movieName') ?? '';\n    if (!searchQuery) {\n      return;\n    }\n\n    const fetchMoviesByName = async searchQuery => {\n      try {\n        const data = await getMovieByName(searchQuery);\n        console.log(data);\n        if (!data?.results?.length) {\n          setMovies([]);\n          Notiflix.Notify.failure('Results not found');\n          return;\n        }\n        setMovies(data.results);\n        setError(null);\n      } catch (error) {\n        setError(error);\n      }\n    };\n\n    fetchMoviesByName(searchQuery);\n  }, [searchParams, error, searchQuery]);\n\n  return (\n    <>\n      <header>\n        <Form setSearchParams={setSearchParams} />\n      </header>\n\n      <div>\n        <ul>\n          {movies.map(movie => {\n            return (\n              <Link key={movie.id} to={`${movie.id}`} state={{from: location}}>\n                <p>{movie.title || movie.name}</p>{' '}\n              </Link>\n            );\n          })}\n        </ul>\n      </div>\n    </>\n  );\n};\n\nexport default Movies;\n","import Notiflix from 'notiflix';\n\nconst BASE_URL = \"https://api.themoviedb.org/3\";\nconst KEY = '7dc61a6c44fade8b575440491a92ae90';\n\n// https://api.themoviedb.org/3/trending/all/day?api_key=7dc61a6c44fade8b575440491a92ae90\n// https://api.themoviedb.org/3/movie/{movie_id}/reviews?api_key=7dc61a6c44fade8b575440491a92ae90\n// https://api.themoviedb.org/3/search/movie?api_key=7dc61a6c44fade8b575440491a92ae90\n\n// details: https://api.themoviedb.org/3/movie/{movie_id}?api_key=7dc61a6c44fade8b575440491a92ae90\n// https://api.themoviedb.org/3/movie/{movie_id}/credits?api_key=7dc61a6c44fade8b575440491a92ae90\n\nexport const getTrandingMovies = async () => {\n    const response = await fetch(`${BASE_URL}/trending/all/day?api_key=${KEY}`);\n    if (!response.ok) {\n        Notiflix.Notify.failure('Service not available');\n\n        return Promise.reject(new Error(\"Bad request\"));\n    }\n    return response.json();\n};\n\nexport const getMovieByName = async (searchQuery) => {\n    const response = await fetch(`${BASE_URL}/search/movie?query=${searchQuery}&api_key=${KEY}`);\n    if (!response.ok) {\n        Notiflix.Notify.failure('Service not available');\n        return Promise.reject(new Error(\"Bad request\"));\n    }\n    return response.json();\n\n};\n\nexport const getMovieById = async (movieId) => {\n    const response = await fetch(`${BASE_URL}/movie/${movieId}?api_key=${KEY}`);\n    if (!response.ok) {\n        Notiflix.Notify.failure('Service not available');\n        return Promise.reject(new Error(\"Bad request\"));\n    }\n    return response.json();\n};\n\nexport const getCastMovie = async (movieId) => {\n    const response = await fetch(`${BASE_URL}/movie/${movieId}/credits?api_key=${KEY}`);\n    if (!response.ok) {\n        Notiflix.Notify.failure('Service not available');\n        return Promise.reject(new Error(\"Bad request\"));\n    }\n    return response.json();\n}\n\n\n// https://api.themoviedb.org/3/movie/976573/credits?api_key=7dc61a6c44fade8b575440491a92ae90&profile_path=/liV9OXUeo7T19hhjFlqTELtETnW.jpg\n// http://image.tmdb.org/t/p/w300/liV9OXUeo7T19hhjFlqTELtETnW.jpg"],"names":["setSearchParams","useState","movieName","setMovieName","onSubmit","e","preventDefault","trim","Notiflix","type","autoComplete","autoFocus","value","placeholder","onChange","target","searchQuery","toLowerCase","useSearchParams","searchParams","get","location","useLocation","console","log","movies","setMovies","error","setError","useEffect","fetchMoviesByName","getMovieByName","data","results","length","map","movie","to","id","state","from","title","name","BASE_URL","KEY","getTrandingMovies","fetch","response","ok","Promise","reject","Error","json","getMovieById","movieId","getCastMovie"],"sourceRoot":""}