{"version":3,"file":"static/js/681.635957b5.chunk.js","mappings":"yNA2CA,UAtCgB,WACd,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAAwCE,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KAgBA,OAdAC,EAAAA,EAAAA,YAAU,WACR,GAAKP,EAAL,CACA,IAAMQ,EAAiB,mCAAG,WAAMR,GAAN,iGAEHS,EAAAA,EAAAA,IAAgBT,GAFb,OAEhBU,EAFgB,OAGtBN,EAAgBM,EAAKC,SACrBL,EAAS,MAJa,gDAMtBA,EAAS,EAAD,IANc,yDAAH,sDASvBE,EAAkBR,EAVE,CAWrB,GAAE,CAACK,EAAOL,KAGT,0BACE,wBAC2B,IAAxBG,EAAaS,OACZT,EAAaU,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACf,2BACE,wBAAKD,KACL,uBAAIC,MAFGF,EADM,KAOjB,wBAAI,sBAKb,C,wMCvCKG,EAAW,+BACXC,EAAM,mCAECC,EAAiB,mCAAG,oGACNC,MAAM,GAAD,OAAIH,EAAJ,qCAAyCC,IADxC,WACvBG,EADuB,QAEfC,GAFe,uBAGzBC,IAAAA,OAAAA,QAAwB,yBAHC,kBAKlBC,QAAQC,OAAO,IAAIC,MAAM,iBALP,gCAOtBL,EAASM,QAPa,2CAAH,qDAUjBC,EAAc,mCAAG,WAAOC,GAAP,uFACHT,MAAM,GAAD,OAAIH,EAAJ,+BAAmCY,EAAnC,oBAA0DX,IAD5D,WACpBG,EADoB,QAEZC,GAFY,uBAGtBC,IAAAA,OAAAA,QAAwB,yBAHF,kBAIfC,QAAQC,OAAO,IAAIC,MAAM,iBAJV,gCAMnBL,EAASM,QANU,2CAAH,sDAUdG,EAAY,mCAAG,WAAO9B,GAAP,uFACDoB,MAAM,GAAD,OAAIH,EAAJ,kBAAsBjB,EAAtB,oBAAyCkB,IAD7C,WAClBG,EADkB,QAEVC,GAFU,uBAGpBC,IAAAA,OAAAA,QAAwB,yBAHJ,kBAIbC,QAAQC,OAAO,IAAIC,MAAM,iBAJZ,gCAMjBL,EAASM,QANQ,2CAAH,sDASZI,EAAY,mCAAG,WAAO/B,GAAP,uFACDoB,MAAM,GAAD,OAAIH,EAAJ,kBAAsBjB,EAAtB,4BAAiDkB,IADrD,WAClBG,EADkB,QAEVC,GAFU,uBAGpBC,IAAAA,OAAAA,QAAwB,yBAHJ,kBAIbC,QAAQC,OAAO,IAAIC,MAAM,iBAJZ,gCAMjBL,EAASM,QANQ,2CAAH,sDASZlB,EAAe,mCAAG,WAAOT,GAAP,uFACJoB,MAAM,GAAD,OAAIH,EAAJ,kBAAsBjB,EAAtB,4BAAiDkB,IADlD,WACrBG,EADqB,QAEbC,GAFa,uBAGvBC,IAAAA,OAAAA,QAAwB,yBAHD,kBAIhBC,QAAQC,OAAO,IAAIC,MAAM,iBAJT,gCAMpBL,EAASM,QANW,2CAAH,qD","sources":["components/Reviews.jsx","services/api.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { getMovieReviews } from 'services/api';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n\n  const [movieReviews, setMovieReviews] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (!movieId) return;\n    const fetchMovieReviews = async movieId => {\n      try {\n        const data = await getMovieReviews(movieId);\n        setMovieReviews(data.results);\n        setError(null);\n      } catch (error) {\n        setError(error);\n      }\n    };\n    fetchMovieReviews(movieId);\n  }, [error, movieId]);\n\n  return (\n    <div>\n      <ul>\n        {movieReviews.length !== 0 ? (\n          movieReviews.map(({ id, author, content }) => (\n            <li key={id}>\n              <h5>{author}</h5>\n              <p>{content}</p>\n            </li>\n          ))\n        ) : (\n          <li>No reviews yet</li>\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default Reviews;\n","import Notiflix from 'notiflix';\n\nconst BASE_URL = \"https://api.themoviedb.org/3\";\nconst KEY = '7dc61a6c44fade8b575440491a92ae90';\n\nexport const getTrandingMovies = async () => {\n    const response = await fetch(`${BASE_URL}/trending/all/day?api_key=${KEY}`);\n    if (!response.ok) {\n        Notiflix.Notify.failure('Service not available');\n\n        return Promise.reject(new Error(\"Bad request\"));\n    }\n    return response.json();\n};\n\nexport const getMovieByName = async (searchQuery) => {\n    const response = await fetch(`${BASE_URL}/search/movie?query=${searchQuery}&api_key=${KEY}`);\n    if (!response.ok) {\n        Notiflix.Notify.failure('Service not available');\n        return Promise.reject(new Error(\"Bad request\"));\n    }\n    return response.json();\n\n};\n\nexport const getMovieById = async (movieId) => {\n    const response = await fetch(`${BASE_URL}/movie/${movieId}?api_key=${KEY}`);\n    if (!response.ok) {\n        Notiflix.Notify.failure('Service not available');\n        return Promise.reject(new Error(\"Bad request\"));\n    }\n    return response.json();\n};\n\nexport const getMovieCast = async (movieId) => {\n    const response = await fetch(`${BASE_URL}/movie/${movieId}/credits?api_key=${KEY}`);\n    if (!response.ok) {\n        Notiflix.Notify.failure('Service not available');\n        return Promise.reject(new Error(\"Bad request\"));\n    }\n    return response.json();\n}\n\nexport const getMovieReviews = async (movieId) => {\n    const response = await fetch(`${BASE_URL}/movie/${movieId}/reviews?api_key=${KEY}`);\n    if (!response.ok) {\n        Notiflix.Notify.failure('Service not available');\n        return Promise.reject(new Error(\"Bad request\"));\n    }\n    return response.json();\n}\n"],"names":["movieId","useParams","useState","movieReviews","setMovieReviews","error","setError","useEffect","fetchMovieReviews","getMovieReviews","data","results","length","map","id","author","content","BASE_URL","KEY","getTrandingMovies","fetch","response","ok","Notiflix","Promise","reject","Error","json","getMovieByName","searchQuery","getMovieById","getMovieCast"],"sourceRoot":""}